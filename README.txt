Aysegul Birand (1,3), Thomas A. A. Prowse (1), Phillip Cassey (1), Paul Q. Thomas (2)

(1) School of Biological Sciences, The University of Adelaide, South Australia 2005, Australia
(2) School of Biomedicine, The University of Adelaide, AND Genome Editing Program, South Australian Health \& Medical Research Institute, South Australia, 2000, Australia
(3) Corresponding author: aysegul.birand@adelaide.edu.au



------
This readme.txt file summarizes the code for the spatially explicit individual-based simulations used in Birand et al. (2025):

Birand, A., Prowse, T. A. A., Cassey, P., and P. Q. Thomas (2025) Evaluating the potential of a new murine gene drive for pre-emptive mouse plague control. 


------
Description:
The code is written in C language and various versions appeared in recent publications by Birand et al. (2022a, 2022b, 2022c) to model suppression probabilities using gene drives in house mouse, rats, and other invasive mammals in Australia (i.e. European rabbit, feral cat, and red fox) and published at open-access repository sites (Dryad: <doi.org/10.5061/dryad.wstqjq2p0> and Zenodo: <doi.org/10.5281/zenodo.6583793>). The original source code was developed by Aaron Vose and used in the publication by Gavrilets and Vose (PNAS, 2005, 102:50). Different versions of the original code appeared in later publications from the Gavrilets lab (e.g. Molecular Ecology, 2007, 16:14). The later versions on gene drives are modified mostly from Birand et al. (2012, The American Naturalist, 179:1). 

There are two separate programs called “niche” and “view”. The former is the main program that carries out the simulations and the latter reads raw data files generated by “niche” and enables visualization of the data with OpenGL.  Below are short summaries of the files required to compile and run the code.

------
Files:
makefile
Compiles both niche and view programs under various operating systems (Linux, Mac). Alternatively, the programs could be compiled by the user using GCC (The GNU Compiler Collection) under other operating systems. 

parameters.h
Header file that includes the parameters used in the program related to life history traits of the organisms, gene drive parameters, and also housekeeping parameters such as when to record data. Some parameters could be changed before compiling the data. Some of the parameters need to be changed simultaneously in the other header file “view.h” (see below). 

niche.h
Header file that is related to house keeping (defines parameters and creates structures that do not change). We do not recommend making any changes in this file.

types.h
Header file that defines integer types. We do not recommend making any changes in this file.

shared.h
Header file that includes functions that are used in both “thread.c” and “niche.c”. We do not recommend making any changes in this file.

random.h
Header file that includes functions that generate random numbers and distributions. We do not recommend making any changes in this file.

view.h
Header file that is mostly related to housekeeping parameters but includes some parameters that can be altered in “parameters.h”, that are reintroduced here for correct scaling of visualizations. We recommend only making changes if corresponding parameters are altered in “parameters.h”.

ps.h
Header file that has some of the functions required to create post script files generated by “view.c”. We do not recommend making any changes in this file.

get_CPUs.c
Prints the number of CPUs entered in “parameters.h” file. Current version allows only 1 CPU due to dispersal algorithms, so the file/function is not used. We do not recommend making any changes in this file.

random.c
Collection of functions that are related to random number distributions that are used in other *.c files. We do not recommend making any changes in this file.
 
niche.c
Main program where the main() function is called. The program initializes the simulation with parameters outlined in the other header files. It calls “thread.c”, where the actual events within each breeding cycle takes place. At the end of each cycle (i.e. call to “thread.c”), it writes relevant data files (if requested in parameters.h). After compiling the executable “niche” program is created with the parameters defined in “parameters.h”. The simulation can be started with the command “./niche 200”, where the number “200” refers to the number of breeding cycles, and can be any positive integer. The parameter file is automatically saved with the random number seed used as a separate file under the name "*.par", e.g. "200.par", the prefix for the file names are always the number of breeding cycles that the simulation ran for. Other files are also created (e.g. 200.sys, 200.deme, etc; see below). If a new simulation is ran with the same number of breeding cycles, the files will overwrite. We do not recommend making any changes in this file. 

thread.c
After the simulation is initialized with “niche.c”, “thread.c” distributes the functions within a breeding cycle to multiple threads that are distributed to the multiple CPUs available (note that the current version of the program only allows only one CPU, due to the dispersal algorithm used). Detailed description of the breeding cycle and functions used can be found in the Methods section of the manuscript. The main function is named “THREAD()”, where it goes through the spatial array of patches, and the individuals that are present on those patches. Also creates *.distance files. We do not recommend making any changes in this file.  

view.c
Reads and prepares a visualization of the data files created in “niche.c” and “thread.c”. Any changes made in the data files will need to be matched in this file for correct reading of the data; therefore we do not recommend making any changes in this file. The visualization can be started with the command “./view 200”, where the number “200” refers to the number of breeding cycles for which the simulation was run (i.e. the numbers in ./niche and ./view should me the same). The typical display will have the landscape with individuals/demes on the top left corner, generation slider, and relevant information/da#ta printed below that. On the bottom left, the distribution of distances vs. density will be displayed. On the right, there will be multiple panels displaying the allele frequencies (top), genotypes frequencies (middle) and the population size (bottom) through time. The lower bar graphs correspond to the distribution of genotypes and the colors correspond to the same colors/genotypes plot in the middle panel above with genotypes through time (f for females, and m for males). The generation slider on the left (below the landscape plot) can be moved to view the simulation progression through time. 

niche
Compiled and executable version. The simulation can be started with the command “./niche 200”, where the number “200” refers to the number of breeding cycles, and can be any positive integer.

view 
Compiled and executable version. The visualization can be started with the command “./view 200”, where the number “200” refers to the number of breeding cycles for which the simulation was run (i.e. the numbers in ./niche and ./view should me the same). 

get_CPUS
Compiled and executable version.

200.par
Sample 'parameter' file created after running the simulation with the command "./niche 200". Stores all the information related to the simulation with the actual seed used for the simulation appended at the end of the file. (File is for the sample simulation presented in Fig. 4a)

200.sys
Sample 'system' file created after running the simulation with the command "./niche 200". Stores all the information requested in "niche.c" related to the hypothetical island population as a whole. The information is displayed in the plots on the right of the display. (File is for the sample simulation presented in Fig. 4a)

200.deme.zip
Sample 'deme' file (compressed) created after running the simulation with the command "./niche 200". Stores all the information requested in "niche.c" related to each of demes present in each patch. The information is displayed in the landscape plot of the display. (File is for the sample simulation presented in Fig. 4a)

200.distance
Sample 'distance' file created after running the simulation with the command "./niche 200". Stores all the information requested in "thread.c" related to the dispersal distances of all the individuals in that breeding cycle. The information is displayed in the plots on the left of the display. (File is for the sample simulation presented in Fig. 4a)


------
Compiling:
Once the *.c and *.h files along with the makefile listed above are placed in the same folder, type “make” in the command line. It will compile the code. 


------
Running simulations:
After making the relevant changes in “parameters.h”, and compiling, the simulation can be started with the command “./niche 200” at the command line, where the number “200” refers to the number of breeding cycles. The program will output the breeding cycles (and the year) and the population size as it runs. It will print “* Done” along with other relevant information when finished, and will return to the command line. The typical run time for 200 breeding cycles (initialized with 40 individuals placed in each patch with 64 x 64 = 4096 patches) is < 3 mins (depending on the population size through time).

After running the program, there will be new data files that will appear in the same folder. The information written in the data files can be found in “niche.c” and “thread.c” with relevant file names. The visualization program can be started with the command “./view 200”, where the number “200” refers to the number of breeding cycles. 


